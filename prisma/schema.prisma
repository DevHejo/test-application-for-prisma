// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(uuid()) //field level atributes. These are on the same line as the field
  age             Int
  name            String
  email           String          @unique
  role            Role            @default(BASIC)
  // preferences    Json
  writtenPosts    Post[]          @relation("writtenPosts")
  favoritedPosts  Post[]          @relation("favoritedPosts")
  // Post           Post[]
  UserPreferences UserPreference?

  // block level attributes. These are writen in a seperate block inside each model
  // unique constraint which sets a rule to make age and name unique. Other entries canot have the same name and same each.
  // put an index on the email. This is going to help with sorting and performance
  @@unique([age, name])
  @@index([email])
}

// one to one realtaionship between User and UserPreference
model UserPreference {
  id           String  @id @default(uuid())
  emailUpdates Boolean
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
}

// one to many relation ship between user and post
model Post {
  id            String     @id @default(uuid())
  title         String
  averageRating Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  author        User       @relation("writtenPosts", fields: [authorId], references: [id])
  authorId      String
  favoritedBy   User?      @relation("favoritedPosts", fields: [favoritedById], references: [id])
  favoritedById String?
  categories    Category[]
}

// many to many relation ship between Category and Post
model Category {
  id    String @id @default(uuid())
  name  String
  posts Post[]
}

enum Role {
  BASIC
  EDITOR
  ADMIN
  SUPERADMIN
}
